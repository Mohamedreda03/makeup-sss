// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
  ARTIST
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String?
  role      UserRole @default(CUSTOMER)
  phone     String?
  address   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth relationships
  accounts       Account[]
  sessions       Session[]
  passwordResets PasswordReset[]

  // User-specific relationships
  orders        Order[]
  bookings      Booking[]
  reviews       Review[]
  cart          Cart?
  makeup_artist MakeUpArtist?
  services      ArtistService[]

  @@map("users")
}

model MakeUpArtist {
  id               String  @id @default(uuid())
  user_id          String  @unique
  pricing          Float?
  experience_years String?
  portfolio        String?
  gender           String?
  rating           Float?  @default(0.0)
  address          String?
  bio              String?
  availability     Boolean @default(false)
  available_slots  Json? // JSON field to store available time slots
  earnings         Float   @default(0.0)

  // Relationship to parent User
  user User @relation(fields: [user_id], references: [id])

  // Artist-specific relationships
  bookings         Booking[]
  reviews_received Review[]  @relation("ArtistReviews")

  @@map("makeup_artists")
}

// Auth Models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ArtistService {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float    @default(0)
  duration    Int      @default(60) // Default 60 minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to artist
  artistId String
  artist   User   @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model Booking {
  id             String        @id @default(uuid())
  user_id        String
  artist_id      String
  service_type   String
  service_price  Float?
  date_time      DateTime
  booking_status BookingStatus @default(PENDING)

  total_price Float? // Total price for the service
  location    String? // Service location

  // Relationships
  user   User         @relation(fields: [user_id], references: [id])
  artist MakeUpArtist @relation(fields: [artist_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Review {
  id        String       @id @default(uuid())
  user_id   String
  artist_id String
  date      DateTime     @default(now())
  rating    Int
  comment   String?
  status    ReviewStatus @default(PENDING)

  // Relationships
  user   User         @relation(fields: [user_id], references: [id])
  artist MakeUpArtist @relation("ArtistReviews", fields: [artist_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Order {
  id             String      @id @default(uuid())
  user_id        String
  order_date     DateTime    @default(now())
  status         OrderStatus @default(PENDING)
  payment_status String

  // Relationships
  user          User           @relation(fields: [user_id], references: [id])
  order_details OrderDetails[]
  payment       Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Payment {
  id             String   @id @default(uuid())
  order_id       String   @unique
  amount         Float
  method         String
  payment_status String
  date           DateTime @default(now())

  // Relationships
  order Order @relation(fields: [order_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Cart {
  id          String @id @default(uuid())
  user_id     String @unique
  total_price Float  @default(0.0)

  // Relationships
  user       User       @relation(fields: [user_id], references: [id])
  cart_items CartItem[]

  @@map("carts")
}

model CartItem {
  id         String @id @default(uuid())
  product_id String
  quantity   Int
  cart_id    String

  product Product @relation(fields: [product_id], references: [id])
  cart    Cart    @relation(fields: [cart_id], references: [id])

  @@map("cart_items")
}

model Product {
  id             String  @id @default(uuid())
  name           String
  description    String?
  price          Float
  category       String
  stock_quantity Int
  inStock        Boolean @default(true)
  featured       Boolean @default(false)
  image          String?
  imageUrl       String? // For backward compatibility

  // Relationships
  cart_items    CartItem[]
  order_details OrderDetails[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model OrderDetails {
  id         String
  product_id String
  quantity   Int
  price      Float
  type       String
  order_id   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@id([order_id, product_id])
  @@map("order_details")
}
